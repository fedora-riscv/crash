From 7eba220e1a7d443cad6716dd83d4953ffd62d566 Mon Sep 17 00:00:00 2001
From: Qi Zheng <zhengqi.arch@bytedance.com>
Date: Tue, 21 Dec 2021 15:40:31 +0800
Subject: [PATCH 01/12] Fix pvops Xen detection for arm machine

Since the xen_start_info on the arm/arm64 platform points to a static
variable '_xen_start_info'(see its definition as below), which makes
that the address of xen_start_info will never be null.

arch/arm/xen/enlighten.c:40:static struct start_info _xen_start_info;
arch/arm/xen/enlighten.c:41:struct start_info *xen_start_info = &_xen_start_info;
arch/arm/xen/enlighten.c:42:EXPORT_SYMBOL(xen_start_info);

As a result, the is_pvops_xen() in commit 4badc6229c69 ("Fix pvops
Xen detection for kernels >= v4.20") always returns TRUE because it
can always read out the non-null address of xen_start_info, finally
the following error will be reported on arm/arm64 platform(non-Xen
environment) because p2m_mid_missing and xen_p2m_addr are not defined:

        crash: cannot resolve "p2m_top"

For the arm/arm64 platform, fix it by using xen_vcpu_info instead of
xen_start_info to detect Xen dumps.

In addition, also explicitly narrow the scope of the xen_start_info
check to x86 with the machine_type(), there is no need to check it on
other architectures.

Fixes: 4badc6229c69 ("Fix pvops Xen detection for kernels >= v4.20")
Signed-off-by: Qi Zheng <zhengqi.arch@bytedance.com>
Acked-by: Kazuhito Hagio <k-hagio-ab@nec.com>
---
 kernel.c | 20 +++++++++++++++-----
 1 file changed, 15 insertions(+), 5 deletions(-)

diff --git a/kernel.c b/kernel.c
index f4598ea217a3..37b7af74ed2e 100644
--- a/kernel.c
+++ b/kernel.c
@@ -10757,11 +10757,21 @@ is_pvops_xen(void)
 	     STREQ(sym, "paravirt_patch_default")))
 		return TRUE;
 
-	if (symbol_exists("xen_start_info") &&
-	    readmem(symbol_value("xen_start_info"), KVADDR, &addr,
-	    sizeof(void *), "xen_start_info", RETURN_ON_ERROR) &&
-	    addr != 0)
-		return TRUE;
+	if (machine_type("X86") || machine_type("X86_64")) {
+		if (symbol_exists("xen_start_info") &&
+		    readmem(symbol_value("xen_start_info"), KVADDR, &addr,
+		    sizeof(void *), "xen_start_info", RETURN_ON_ERROR) &&
+		    addr != 0)
+			return TRUE;
+	}
+
+	if (machine_type("ARM") || machine_type("ARM64")) {
+		if (symbol_exists("xen_vcpu_info") &&
+		    readmem(symbol_value("xen_vcpu_info"), KVADDR, &addr,
+		    sizeof(void *), "xen_vcpu_info", RETURN_ON_ERROR) &&
+		    addr != 0)
+			return TRUE;
+	}
 
 	return FALSE;
 }
-- 
2.20.1

